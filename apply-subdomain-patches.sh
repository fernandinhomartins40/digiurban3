#!/bin/bash

# SCRIPT DE APLICA√á√ÉO AUTOM√ÅTICA DOS PATCHES DE SUBDOM√çNIO
# Arquivo: apply-subdomain-patches.sh

echo "üöÄ ============================================"
echo "üöÄ APLICANDO PATCHES DE SUBDOM√çNIO"
echo "üöÄ ============================================"

# Configura√ß√µes
SUPABASE_DIR="/opt/supabase-manager"
SRC_DIR="$SUPABASE_DIR/src"
CORE_DIR="$SUPABASE_DIR/supabase-core"
BACKUP_DIR="$SUPABASE_DIR/backups/subdomain_$(date +%Y%m%d_%H%M%S)"

# ============================================
# 1. BACKUP COMPLETO
# ============================================

echo "üì¶ Criando backup completo..."
mkdir -p "$BACKUP_DIR"

# Backup dos arquivos cr√≠ticos
cp "$SRC_DIR/server.js" "$BACKUP_DIR/server.js.backup"
cp "$CORE_DIR/generate.bash" "$BACKUP_DIR/generate.bash.backup"
cp "$SRC_DIR/instances.json" "$BACKUP_DIR/instances.json.backup" 2>/dev/null || echo "instances.json n√£o existe"

echo "‚úÖ Backup criado em: $BACKUP_DIR"

# ============================================
# 2. APLICAR PATCH NO SUPABASE MANAGER
# ============================================

echo "üîß Aplicando patch no Supabase Manager..."

# Criar arquivo tempor√°rio com o patch
cat << 'EOF' > /tmp/manager_patch.js

// ============================================
// INTEGRA√á√ÉO DE SUBDOM√çNIOS - ADICIONADO AUTOMATICAMENTE
// ============================================

const SUBDOMAIN_CONFIG = {
  enabled: true,
  domain: 'ultrabase.com.br',
  maxLength: 20,
  fallbackToIP: true,
  validateDNS: false
};

function generateSubdomain(instanceId) {
  if (!SUBDOMAIN_CONFIG.enabled) {
    return null;
  }
  
  let subdomain = instanceId.toLowerCase()
    .replace(/[^a-z0-9-]/g, '')
    .substring(0, SUBDOMAIN_CONFIG.maxLength)
    .replace(/^-+|-+$/g, '');
  
  if (!subdomain) {
    subdomain = 'inst-' + Date.now().toString().slice(-6);
  }
  
  console.log(`üåê Subdom√≠nio gerado: ${subdomain}.${SUBDOMAIN_CONFIG.domain}`);
  return subdomain;
}

function generateInstanceUrlWithSubdomain(instanceId, port, useHttps = true, subdomain = null) {
  if (SUBDOMAIN_CONFIG.enabled && subdomain) {
    const protocol = useHttps ? 'https' : 'http';
    return `${protocol}://${subdomain}.${SUBDOMAIN_CONFIG.domain}`;
  }
  
  if (SUBDOMAIN_CONFIG.fallbackToIP) {
    return `http://${EXTERNAL_IP}:${port}`;
  }
  
  throw new Error('Subdom√≠nios desabilitados e fallback para IP n√£o permitido');
}

function createInstanceUrlsWithSubdomain(instanceId, ports, credentials) {
  const subdomain = generateSubdomain(instanceId);
  
  const urls = {
    studio: generateInstanceUrlWithSubdomain(instanceId, ports.kong_http, true, subdomain),
    api: generateInstanceUrlWithSubdomain(instanceId, ports.kong_http, true, subdomain),
    db: `postgresql://postgres:${credentials.postgres_password}@${EXTERNAL_IP}:${ports.postgres_ext}/postgres`
  };
  
  console.log(`üîó URLs geradas para inst√¢ncia ${instanceId}:`);
  console.log(`  Studio: ${urls.studio}`);
  console.log(`  API: ${urls.api}`);
  
  return { urls, subdomain };
}

function getAdditionalScriptEnvironment(instance) {
  const additionalEnv = {};
  
  if (instance.subdomain && SUBDOMAIN_CONFIG.enabled) {
    additionalEnv.MANAGER_USE_SUBDOMAIN = 'true';
    additionalEnv.MANAGER_SUBDOMAIN = instance.subdomain;
    additionalEnv.MANAGER_DOMAIN_SUFFIX = SUBDOMAIN_CONFIG.domain;
    
    console.log(`‚öôÔ∏è Passando subdom√≠nio para generate.bash: ${instance.subdomain}.${SUBDOMAIN_CONFIG.domain}`);
  } else {
    additionalEnv.MANAGER_USE_SUBDOMAIN = 'false';
    console.log(`‚öôÔ∏è Usando modo IP:porta para generate.bash`);
  }
  
  return additionalEnv;
}

// Log de ativa√ß√£o
console.log('üåê =================================');
console.log('üåê INTEGRA√á√ÉO DE SUBDOM√çNIOS ATIVA');
console.log('üåê =================================');

EOF

# Adicionar o patch ao in√≠cio do server.js (depois dos requires)
sed -i '/const net = require/r /tmp/manager_patch.js' "$SRC_DIR/server.js"

# Modificar a cria√ß√£o de URLs na fun√ß√£o createInstance
# SUBSTITUIR: urls: { studio: generateInstanceUrl(instanceId, ports.kong_http), ...
# POR: const { urls, subdomain } = createInstanceUrlsWithSubdomain(instanceId, ports, credentials);

sed -i 's/urls: {$/\/\/ URLs com subdom√≠nio\n      const { urls, subdomain } = createInstanceUrlsWithSubdomain(instanceId, ports, credentials);\n      const urlsObj = {/' "$SRC_DIR/server.js"
sed -i 's/studio: generateInstanceUrl(instanceId, ports\.kong_http),/studio: urls.studio,/' "$SRC_DIR/server.js"
sed -i 's/api: generateInstanceUrl(instanceId, ports\.kong_http),/api: urls.api,/' "$SRC_DIR/server.js"

# Adicionar campo subdomain
sed -i '/id: instanceId,/a\\      subdomain: subdomain,' "$SRC_DIR/server.js"

# Modificar prepareScriptEnvironment para incluir vari√°veis de subdom√≠nio
sed -i '/MANAGER_EXTERNAL_IP: EXTERNAL_IP$/a\\      ...getAdditionalScriptEnvironment(instance)' "$SRC_DIR/server.js"

echo "‚úÖ Patch do Manager aplicado"

# ============================================
# 3. APLICAR PATCH NO GENERATE.BASH
# ============================================

echo "üîß Aplicando patch no generate.bash..."

# Criar o patch para o generate.bash
cat << 'EOF' > /tmp/generate_patch.sh

# ============================================
# SUPORTE A SUBDOM√çNIOS - ADICIONADO AUTOMATICAMENTE
# ============================================

echo "üåê Verificando modo de configura√ß√£o de URLs..."

if [ -n "$MANAGER_USE_SUBDOMAIN" ] && [ "$MANAGER_USE_SUBDOMAIN" = "true" ]; then
    if [ -n "$MANAGER_SUBDOMAIN" ] && [ -n "$MANAGER_DOMAIN_SUFFIX" ]; then
        echo "üåê Modo SUBDOM√çNIO detectado"
        echo "üåê Subdom√≠nio: $MANAGER_SUBDOMAIN"
        echo "üåê Dom√≠nio: $MANAGER_DOMAIN_SUFFIX"
        export URL_MODE="subdomain"
        export SUBDOMAIN_URL="https://${MANAGER_SUBDOMAIN}.${MANAGER_DOMAIN_SUFFIX}"
    else
        echo "‚ö†Ô∏è  Modo subdom√≠nio solicitado mas vari√°veis incompletas"
        echo "üîÑ Fallback para modo IP:porta"
        export URL_MODE="ip_port"
    fi
else
    echo "üåê Modo IP:PORTA (padr√£o)"
    export URL_MODE="ip_port"
fi

echo "üîß Configurando URLs baseado no modo: $URL_MODE"

if [ "$URL_MODE" = "subdomain" ]; then
    echo "üåê Configurando URLs com subdom√≠nio: $SUBDOMAIN_URL"
    export API_EXTERNAL_URL="$SUBDOMAIN_URL"
    export SUPABASE_PUBLIC_URL="$SUBDOMAIN_URL"
    export SITE_URL="https://ultrabase.com.br"
    echo "‚úÖ URLs configuradas para subdom√≠nio"
elif [ "$URL_MODE" = "ip_port" ]; then
    echo "üåê Configurando URLs com IP:porta"
    if [ -n "$MANAGER_EXTERNAL_IP" ]; then
        export API_EXTERNAL_URL="http://${MANAGER_EXTERNAL_IP}:${KONG_HTTP_PORT}"
        export SITE_URL="http://${MANAGER_EXTERNAL_IP}:3000"
        export SUPABASE_PUBLIC_URL="http://${MANAGER_EXTERNAL_IP}:${KONG_HTTP_PORT}"
    else
        export API_EXTERNAL_URL="http://0.0.0.0:${KONG_HTTP_PORT}"
        export SITE_URL="http://0.0.0.0:3000"
        export SUPABASE_PUBLIC_URL="http://0.0.0.0:${KONG_HTTP_PORT}"
    fi
    echo "‚úÖ URLs configuradas para IP:porta"
fi

EOF

# Encontrar a linha onde come√ßa a configura√ß√£o de URLs e inserir o patch antes
LINE_NUM=$(grep -n "if \[ -n \"\$MANAGER_EXTERNAL_IP\" \]" "$CORE_DIR/generate.bash" | head -1 | cut -d: -f1)

if [ -n "$LINE_NUM" ]; then
    # Inserir o patch antes da configura√ß√£o existente
    sed -i "${LINE_NUM}i\\$(cat /tmp/generate_patch.sh)" "$CORE_DIR/generate.bash"
    
    # Comentar a configura√ß√£o antiga para n√£o conflitar
    sed -i '/# Set values for required variables/,/^fi$/s/^/# OLD_CONFIG: /' "$CORE_DIR/generate.bash"
    
    echo "‚úÖ Patch do generate.bash aplicado"
else
    echo "‚ö†Ô∏è  N√£o foi poss√≠vel localizar a se√ß√£o de configura√ß√£o de URLs"
    echo "‚ö†Ô∏è  Aplica√ß√£o manual pode ser necess√°ria"
fi

# ============================================
# 4. VERIFICA√á√ÉO DOS PATCHES
# ============================================

echo "üîç Verificando aplica√ß√£o dos patches..."

# Verificar se as fun√ß√µes foram adicionadas ao manager
if grep -q "generateSubdomain" "$SRC_DIR/server.js"; then
    echo "‚úÖ Fun√ß√µes de subdom√≠nio adicionadas ao manager"
else
    echo "‚ùå Falha ao adicionar fun√ß√µes ao manager"
fi

# Verificar se o patch foi adicionado ao generate.bash
if grep -q "URL_MODE" "$CORE_DIR/generate.bash"; then
    echo "‚úÖ L√≥gica de subdom√≠nio adicionada ao generate.bash"
else
    echo "‚ùå Falha ao adicionar l√≥gica ao generate.bash"
fi

# ============================================
# 5. LIMPEZA
# ============================================

echo "üßπ Limpando arquivos tempor√°rios..."
rm -f /tmp/manager_patch.js /tmp/generate_patch.sh

echo "‚úÖ ============================================"
echo "‚úÖ PATCHES APLICADOS COM SUCESSO"
echo "‚úÖ ============================================"
echo "üì¶ Backup em: $BACKUP_DIR"
echo "üîÑ Reinicie o Supabase Manager para aplicar as mudan√ßas"
echo "üß™ Teste criando uma nova inst√¢ncia"

# ============================================
# 6. INSTRU√á√ïES FINAIS
# ============================================

cat << 'EOF'

üìã PR√ìXIMOS PASSOS:

1. Reiniciar Supabase Manager:
   pkill -f "node.*server.js"
   cd /opt/supabase-manager/src && node server.js &

2. Testar cria√ß√£o de nova inst√¢ncia

3. Verificar se URLs usam subdom√≠nios:
   - Studio: https://[instancia].ultrabase.com.br
   - API: https://[instancia].ultrabase.com.br

4. Verificar bot√µes do dashboard funcionando

5. Em caso de problemas, restaurar backup:
   cp backup/server.js.backup src/server.js
   cp backup/generate.bash.backup supabase-core/generate.bash

EOF